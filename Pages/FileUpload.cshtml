@page
@model FileUploadModel
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@functions{
public string? GetAntiXsrfRequestToken()
{
    return  Xsrf.GetAndStoreTokens(Model.HttpContext).RequestToken;
}
}

@{
    ViewData["Title"] = "PetVibes - Upload";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <!--importing tensorflow js -->
    <script src="https://cdn.jsdelivr.net/npm/@@tensorflow/tfjs@@4.17.0/dist/tf.min.js"></script>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" integrity="sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z" crossorigin="anonymous">
    <link href="https://fonts.googleapis.com/css2?family=Kumbh+Sans:wght@100..900&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="path/to/styles.css">
</head>

<body style="background-color: #222831;">
    <form method="post">
    <!-- your inputs-->
    </form>
    <div class="fileUpload">
        <div class="container">
            <div class="row justify-content-center">
                <div class="text-center">
                    <form id="uploadForm" enctype="multipart/form-data">
                        <label class="form-label" style="color: white;" for="customFile">Preferred file formats are .PNG and .JPG, please keep image size below 2MB!</label>
                        <div class="upload_buttongroup">
                            <input type="file" class="upload_buttonL" id="customFile" accept=".png, .jpg" aria-describedby="uploadBtn">
                            <div class="upload_buttonR">
                                <button class="btn btn-primary" type="button" id="uploadBtn">Upload</button>
                            </div>
                        </div>

                        <small id="fileSizeError" class="text-danger" style="display: none;">File size exceeds 2MB limit.</small>
                        <small id="fileTypeError" class="text-danger" style="display: none;">Please select a file with .png or .jpg extension.</small>
                    </form>
                </div>
            </div>
            <div class="row justify-content-center mt-4">
                <div class="col-md-8">
                    <div class="upload_imagePreview text-center" style="display: none;">
                        <div class="upload_imageContainer">
                            <div class="upload_spinner-border text-primary" role="status">
                                <span class="sr-only">Loading...</span>
                            </div>
                            <img id="previewImg" class="img-fluid" alt="Preview Image">
                        </div>
                    </div>
                </div>
            </div>
            <div class="row justify-content-center mt-4">
                <div class="col-md-8">
                    <div class="upload_emotionBox text-center" style="display: none;">
                        <p class="upload_emotionTitle">Emotion Detected: <span id="emotionContent">Thinking...</span></p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        async function preprocess(imageData) {
            let imageTensor = tf.browse.fromPixels(imageData);
            const offset = tf.scalar(255.0);
            const normalized = tf.scalar(1.0).sub(resized.div(offset));
            return normalized;
        }
        async function loadModel() {
            return tf.loadLayersModel('tfjs_petemo/model.json');
        }
        async function prediction(tensor) {
            const model = await loadModel();
            let result = model.predict(tensor).data();
            return result;
        }
        document.getElementById('uploadBtn').addEventListener('click', function () {
            var fileInput = document.getElementById('customFile');
            var file = fileInput.files[0]; // Get the selected file
            var fileSize = file.size; // Size in bytes
            var maxSize = 2 * 1024 * 1024; // 2MB in bytes
            var allowedExtensions = ['png', 'jpg'];

            if (fileSize > maxSize) {
                document.getElementById('fileSizeError').style.display = 'block';
            } else if (!allowedExtensions.includes(file.name.split('.').pop().toLowerCase())) {
                document.getElementById('fileTypeError').style.display = 'block';
            } else {
                document.getElementById('fileSizeError').style.display = 'none';
                document.getElementById('fileTypeError').style.display = 'none';

                // Reset emotion content to "Thinking..." and color to grey
                document.getElementById('emotionContent').innerHTML = "Thinking...";
                document.querySelector('.upload_emotionBox').style.backgroundColor = "#ced4da";

                var emotion = "";

                // Display loading overlay
                document.querySelector('.upload_imageContainer img').style.filter = 'grayscale(70%)';
                document.querySelector('.upload_spinner-border').style.display = 'block';

                // Display image preview
                var reader = new FileReader();
                reader.onload = function (event) {
                    var img = document.getElementById('previewImg');
                    img.src = event.target.result;
                    document.querySelector('.upload_imagePreview').style.display = 'block';
                    // Display emotion box after image upload
                    document.querySelector('.upload_emotionBox').style.display = 'block';

                    img.onload = async function () {
                        console.log(img.width + 'x' + img.height);
                        let tensor = tf.browser.fromPixels(img)
                            .resizeNearestNeighbor([224, 224])
                            .expandDims();

                        let result = await prediction(tensor);
                        console.log(result);
                        let resultIndex = result.indexOf(Math.max.apply(Math, result));
                        console.log(resultIndex);
                        switch(resultIndex) {
                            case 0:
                                emotion = 'Angry';
                                break;
                            case 1:
                                emotion = 'Happy';
                                break;
                            case 2:
                                emotion = 'Other';
                                break;
                            case 3:
                                emotion = 'Sad';
                                break;
                        }
                        var formData = new FormData();
                        var currentDate = new Date();
                        var currentTime = currentDate.toLocaleString();
                        formData.append('FileUpload', file);
                        formData.append('EmotionString', emotion);
                        $.ajax({
                            url: '',
                            headers:
                            {
                                "RequestVerificationToken": '@GetAntiXsrfRequestToken()',
                            },
                            data: formData,
                            contentType: false,
                            processData: false,
                            type: 'post',
                        });
                    }
                };
                reader.readAsDataURL(file);
                
                setTimeout(function () {
                    // Hide loading overlay
                    document.querySelector('.upload_imageContainer img').style.filter = 'grayscale(0%)';
                    document.querySelector('.upload_spinner-border').style.display = 'none';

                    document.getElementById('emotionContent').innerHTML = emotion;

                    // Change emotion box color based on emotion
                    var emotionBox = document.querySelector('.upload_emotionBox');

                    if (emotion === 'Happy') {
                        emotionBox.style.backgroundColor = "#7dc17d";
                    } else if (emotion === 'Sad') {
                        emotionBox.style.backgroundColor = "#ced4da";
                    } else if (emotion === 'Angry') {
                        emotionBox.style.backgroundColor = "#dc7f7f";
                    } else {
                        emotionBox.style.backgroundColor = "#FFFFFF";
                    }
                }, 2000); // 2 second delay
            }
        });

    </script>
</body>
</html>
