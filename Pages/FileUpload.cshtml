@page
@model FileUploadModel
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@functions{
public string GetAntiXsrfRequestToken()
{
    return Xsrf.GetAndStoreTokens(Model.HttpContext).RequestToken;
}
}

@{
    ViewData["Title"] = "PetVibes - Upload";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <!--importing tensorflow js -->
    <script src="https://cdn.jsdelivr.net/npm/@@tensorflow/tfjs@@4.17.0/dist/tf.min.js"></script>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" integrity="sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z" crossorigin="anonymous">
    <style>
        #imagePreview {
            position: relative;
            overflow: hidden;
            text-align: center;
        }

        #imageContainer {
            display: flex;
            align-items: center;
            justify-content: center;
            height: 450px; /* Adjust this value as needed */
        }

        #loadingOverlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 255, 255, 0.7);
            display: none;
            justify-content: center;
            align-items: center;
        }

        .spinner-border {
            width: 3rem;
            height: 3rem;
        }

        #emotionBox {
            display: none;
            margin-top: 10px;
            padding: 10px;
            border-radius: 5px;
            max-width: 300px;
            text-align: center;
            position: absolute;
            top: 50px;
            background-color: #ced4da; /* Default color */
        }

        #emotionTitle {
            font-weight: bold;
            margin-bottom: 5px;
        }
    </style>
</head>
<body>
    <form method="post">
    <!-- your inputs-->
    </form>
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="text-center">
                    <form id="uploadForm" enctype="multipart/form-data">
                        <label class="form-label" for="customFile">Preferred file formats are .PNG and .JPG, please keep image size below 2MB!</label>
                        <div class="input-group">
                            <input type="file" class="form-control" id="customFile" accept=".png, .jpg" aria-describedby="uploadBtn">
                            <div class="input-group-append">
                                <button class="btn btn-primary" type="button" id="uploadBtn">Upload</button>
                            </div>
                        </div>
                        <small id="fileSizeError" class="text-danger" style="display: none;">File size exceeds 2MB limit.</small>
                        <small id="fileTypeError" class="text-danger" style="display: none;">Please select a file with .png or .jpg extension.</small>
                    </form>
                </div>
            </div>
        </div>
        <div class="row justify-content-center mt-4">
            <div class="col-md-8">
                <div id="imagePreview" class="text-center" style="display: none;">
                    <div id="loadingOverlay">
                        <div class="spinner-border text-primary" role="status">
                            <span class="sr-only">Loading...</span>
                        </div>
                    </div>
                    <div id="emotionBox" class="text-center">
                        <p id="emotionTitle">Emotion Detected:</p>
                        <p id="emotionContent">Thinking...</p>
                    </div>
                    <div id="imageContainer">
                        <img id="previewImg" class="img-fluid" alt="Preview Image">
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        //TODO: move the model stuff to it's own file/function to be referenced
        async function preprocess(imageData) {
            let imageTensor = tf.browse.fromPixels(imageData);
            const offset = tf.scalar(255.0);
            const normalized = tf.scalar(1.0).sub(resized.div(offset));
            //may need to change dimensions of input
            return normalized;
        }
        async function loadModel() {
            return tf.loadLayersModel('tfjs_petemo/model.json');
        }
        async function prediction(image) {
            const model = await loadModel();
            const imageTensor = preprocess(image);
            let result = model.predict(imageTensor);
            console.log(result);
        }

        /* on page load (for debugging)
        document.addEventListener('DOMContentLoaded', function() {
            console.log("hi");
            prediction();
            
        });
        */
        document.getElementById('uploadBtn').addEventListener('click', function () {
            var fileInput = document.getElementById('customFile');
            var file = fileInput.files[0]; // Get the selected file
            var fileSize = file.size; // Size in bytes
            var maxSize = 2 * 1024 * 1024; // 2MB in bytes
            var allowedExtensions = ['png', 'jpg'];

            

            if (fileSize > maxSize) {
                document.getElementById('fileSizeError').style.display = 'block';
            } else if (!allowedExtensions.includes(file.name.split('.').pop().toLowerCase())) {
                document.getElementById('fileTypeError').style.display = 'block';
            } else {
                document.getElementById('fileSizeError').style.display = 'none';
                document.getElementById('fileTypeError').style.display = 'none';

                // Reset emotion content to "Thinking..." and color to grey
                document.getElementById('emotionContent').innerHTML = "Thinking...";
                document.getElementById('emotionBox').style.backgroundColor = "#ced4da";

                var formData = new FormData();
                formData.append('FileUpload', file);
                var currentDate = new Date();
                var currentTime = currentDate.toLocaleString();
                //formData.append('timestamp', currentTime);

                $.ajax({
                    url: '',
                    headers:
                    {
                        "RequestVerificationToken": '@GetAntiXsrfRequestToken()'
                    },
                    data: formData,
                    contentType: false,
                    processData: false,
                    type: 'post',
                    //success: function () {
                    //    alert('Uploaded by jQuery');
                    //}
                });

                // Display loading overlay
                document.getElementById('loadingOverlay').style.display = 'flex';

                // Display image preview
                var reader = new FileReader();
                reader.onload = function (event) {
                    var img = document.getElementById('previewImg');
                    img.src = event.target.result;
                    document.getElementById('imagePreview').style.display = 'block';
                    // Display emotion box after image upload
                    document.getElementById('emotionBox').style.display = 'block';

                    img.onload = function () {
                        
                        console.log(img.width + 'x' + img.height);
                        let tensor = tf.browser.fromPixels(img)
                            .resizeNearestNeighbor([224, 224])
                            .expandDims();
                        //LOOK AT THIS PART. currently taking too long to load model so prediction can't be done. find a way to wait for model to load first
                        (async() => {
                            const model = await tf.loadLayersModel('tfjs_petemo/model.json');
                            let predictions = model.predict(tensor).data();
                            console.log(predictions);                            
                        })();
                    }
                    
                    
                };
                reader.readAsDataURL(file);

                // Simulate server response delay (remove this in actual implementation)
                setTimeout(function () {
                    // Hide loading overlay
                    document.getElementById('loadingOverlay').style.display = 'none';

                    // Replace "Thinking..." with actual emotion received from server
                    var emotion = "Positive"; // Set manually for now, will be replaced once we get emotion from server
                    document.getElementById('emotionContent').innerHTML = emotion;

                    // Change emotion box color based on emotion
                    if (emotion === "Positive") {
                        document.getElementById('emotionBox').style.backgroundColor = "#7dc17d";
                    } else if (emotion === "Neutral") {
                        document.getElementById('emotionBox').style.backgroundColor = "#ced4da";
                    } else if (emotion === "Negative") {
                        document.getElementById('emotionBox').style.backgroundColor = "#dc7f7f";
                    }
                }, 2000); // 2 second delay
            }
        });
    </script>
</body>
</html>
